[{"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; laps ; 58 } } ; 5 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "greater { hop { filter_eq { all_rows ; incumbent ; curt weldon } ; opponent } ; hop { filter_eq { all_rows ; incumbent ; john murtha } ; opponent } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmin { all_rows ; date ; 3 } ; number & name } ; no46233 duchess of sutherland }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; attendance } ; location } ; kohl center madison , wi }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "less { hop { filter_eq { all_rows ; name ; richard schryer } ; round } ; hop { filter_eq { all_rows ; name ; james carter } ; round } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_greater { filter_eq { all_rows ; date ; 12 june 1972 } ; crowd ; 20000 } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; vfl park }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "most_eq { all_rows ; high assists ; whalen }", "output": "majority", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "round_eq { sum { filter_eq { all_rows ; school / club team ; university of texas at arlington } ; overall } ; 308 }", "output": "aggregation", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; lec sport ; tennis } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { all_rows ; title ; ruler } } ; eq { hop { filter_eq { all_rows ; title ; ruler } ; state } ; qin } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmin { all_rows ; price ; 2 } ; internet plan } ; internet 30 }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "greater { hop { filter_eq { all_rows ; date ; november 10 , 1975 } ; attendance } ; hop { filter_eq { all_rows ; date ; december 7 , 1975 } ; attendance } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; population } ; english name } ; hedong district }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; result ; re - elected } } ; 8 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; year built ; 3 } ; church name } ; batalden bedehuskapell }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; region ; imereti } } ; 8 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "most_greater_eq { all_rows ; screen size ( inch ) ; 7 }", "output": "majority", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "greater { hop { filter_eq { all_rows ; call sign ; k297al } ; frequency mhz } ; hop { filter_eq { all_rows ; call sign ; k239ax } ; frequency mhz } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_less { all_rows ; age ; 25 } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "less { hop { filter_eq { all_rows ; tournament ; bath } ; date } ; hop { filter_eq { all_rows ; tournament ; hull } ; date } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { filter_eq { all_rows ; date ; december } ; game site ; rca dome } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "round_eq { avg { all_rows ; weight ( kg ) } ; 55.625 }", "output": "aggregation", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_greater { all_rows ; towns / villages ; 350 } } ; eq { hop { filter_greater { all_rows ; towns / villages ; 350 } ; name of county } ; borsod - aba\u00faj - zempl\u00e9n } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "round_eq { sum { filter_greater_eq { all_rows ; year ; 1966 } ; points } ; 15 }", "output": "aggregation", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; owned since ; 2011 } } ; 9 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; votes } ; artist } ; sahlene }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { all_rows ; points ; 47 } } ; eq { hop { filter_eq { all_rows ; points ; 47 } ; game } ; 32 } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; money ; 4 } ; score } ; 68 + 68 + 69 + 79", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { all_rows ; team ; season cancelled } } ; eq { hop { filter_eq { all_rows ; team ; season cancelled } ; season } ; 2009 - 10 } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; silver ; 2 } ; nation } ; italy }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "round_eq { sum { all_rows ; points } ; 19 }", "output": "aggregation", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; capacity } ; venue } ; dinamo , minsk }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { filter_eq { all_rows ; region ; africa } ; joined opec ; 1969 } } ; eq { hop { filter_eq { filter_eq { all_rows ; region ; africa } ; joined opec ; 1969 } ; country } ; algeria } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_all { all_rows ; nation } } ; 17 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; points } ; club } ; stade tunisien }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; total } ; name } ; ivo laku\u010ds ( lat ) }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "most_greater { all_rows ; result ; 0 }", "output": "majority", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; date ; 6 june 1981 } } ; 3 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; crowd ; 2 } ; venue } ; mcg }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "less { hop { filter_eq { all_rows ; athlete ; peter kamais lotagor } ; time } ; hop { filter_eq { all_rows ; athlete ; moses ndiema masai } ; time } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { all_rows ; transfer window ; winter } } ; eq { hop { filter_eq { all_rows ; transfer window ; winter } ; name } ; burke } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "most_eq { all_rows ; constructor ; ford }", "output": "majority", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; bronze ; 2 } ; nation } ; netherlands }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { nth_min { filter_eq { all_rows ; team ; new jersey } ; date ; 1 } ; october 5 }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; lost } } ; eq { hop { filter_eq { filter_eq { all_rows ; party ; republican } ; result ; lost } ; incumbent } ; dan crane } }", "output": "unique", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "less { hop { filter_eq { all_rows ; institution ; university of dayton } ; founded } ; hop { filter_eq { all_rows ; institution ; university of memphis } ; founded } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; year ; 2 } ; new jersey } ; paramus ll paramus }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "greater { hop { filter_eq { all_rows ; team ; sandviken } ; in toppserien since } ; hop { filter_eq { all_rows ; team ; kolbotn } ; in toppserien since } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { less { hop { filter_eq { all_rows ; title ; empire } ; order } ; hop { filter_eq { all_rows ; title ; hollywood } ; order } } ; and { eq { hop { filter_eq { all_rows ; title ; empire } ; order } ; 4 } ; eq { hop { filter_eq { all_rows ; title ; hollywood } ; order } ; 5 } } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; sport ; ice hockey } } ; 3 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; number of electorates ( 2009 ) ; 2 } ; name } ; mandsour }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; losses ; 2 } ; club } ; club sestao }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { nth_argmax { all_rows ; attendance ; 3 } ; game } ; 1 }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "less { hop { filter_eq { all_rows ; player ; john senst } ; pick } ; hop { filter_eq { all_rows ; player ; paul brown } ; pick } }", "output": "comparative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; lost ; 3 } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { nth_max { all_rows ; frequency ; 2 } ; 933 mhz }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; competition ; world cup qualification } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { nth_min { all_rows ; year completed ; 1 } ; 1955 }", "output": "ordinal", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "round_eq { avg { all_rows ; score } ; 71 }", "output": "aggregation", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { hop { argmax { all_rows ; caps } ; name } ; vaughan coveny }", "output": "superlative", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "round_eq { avg { all_rows ; pick } ; 4.5 }", "output": "aggregation", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "eq { count { filter_eq { all_rows ; gender ; f } } ; 2 }", "output": "count", "category": "Text to Code 840.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to classify the command into one of these seven categories: (1) majority, (2) unique, (3) superlative, (4) count, (5) comparative, (6) aggregation, and (7) ordinal. \n Here are the defications of each category: \n 1. majority: Describing the majority values (most or all) over one column, with the scope of all table rows or a subset of rows \n 2. unique: Describing one unique row, regarding one column, with the scope of all table rows or a subset of rows \n 3. Superlative: Describing the maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 4. Ordinal: Describing the n-th maximum or minimum value in a column, with the scope of all table rows or a subset of rows \n 5. Comparative: Comparing two rows in the table, regarding their values in one column \n 6. Count: counting some rows in the table based on the values in one column, with the scope of all table rows or a subset of rows \n 7. Aggregation: Describing the sum or average value over a column, with the scope of all table rows or a subset of rows. \n Here are the definitions of logical operators for understanding of command: \n 1. count: returns the number of rows in the view. \n 2. only: returns whether there is exactly one row in the view. \n 3. hop: returns the value under the header column of the row. \n 4. and: returns the boolean operation result of two arguments. \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column. \n 6. nth_max/nth_min: returns the n-th max/n-th min of the values under the header column. \n 7. argmax/argmin: returns the row with the max/min value in header column. \n 8. nth_argmax/nth_argmin: returns the row with the n-th max/min value in header column. \n 9. eq/not_eq: returns if the two arguments are equal. \n 10. round_eq: returns if the two arguments are roughly equal under certain tolerance. \n 11. greater/less: returns if the first argument is greater/less than the second argument. \n 12. diff: returns the difference between two arguments. \n 13. filter_eq/ filter_not_eq: returns the subview whose values under the header column is equal/not equal to the third argument. \n 14. filter_greater/filter_less: returns the subview whose values under the header column is greater/less than the third argument. \n 15. filter_greater_eq /filter_less_eq: returns the subview whose values under the header column is greater/less or equal than the third argument. \n 16. filter_all: returns the view itself for the case of describing the whole table \n 17. all_eq/not_eq: returns whether all the values under the header column are equal/not equal to the third argument. \n 18. all_greater/less: returns whether all the values under the header column are greater/less than the third argument. \n 19. all_greater_eq/less_eq: returns whether all the values under the header column are greater/less or equal to the third argument. \n 20. most_eq/not_eq: returns whether most of the values under the header column are equal/not equal to the third argument. \n 21. most_greater/less: returns whether most of the values under the header column are greater/less than the third argument. \n 22. most_greater_eq/less_eq: returns whether most of the values under the header column are greater/less or equal to the third argument.", "input": "and { only { filter_eq { all_rows ; hometown ; ca } } ; eq { hop { filter_eq { all_rows ; hometown ; ca } ; player } ; james kaprelian } }", "output": "unique", "category": "Text to Code 840.json"}]