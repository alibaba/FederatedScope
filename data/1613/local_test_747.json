[{"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; original air date ; 2 } ; title } ; the western isles and shetland } = true", "output": "select the row whose original air date record of all rows is 2nd maximum . the title record of this row is the western isles and shetland .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { eq { nth_min { all_rows ; track ; 5 } ; 5 } ; eq { hop { nth_argmin { all_rows ; track ; 5 } ; song title } ; crazy arms } } = true", "output": "the 5th minimum track record of all rows is 5 . the song title record of the row with 5th minimum track record is crazy arms .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmin { all_rows ; original air date } ; title } ; a doomed christmas } = true", "output": "select the row whose original air date record of all rows is minimum . the title record of this row is a doomed christmas .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { filter_eq { all_rows ; arena ; honda center } ; attendance ; 17174 } } ; 5 } = true", "output": "select the rows whose arena record fuzzily matches to honda center . among these rows , select the rows whose attendance record is equal to 17174 . the number of such rows is 5 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "only { filter_greater { all_rows ; points ; 90 } } = true", "output": "select the rows whose points record is greater than 90 . there is only one such row in the table .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; high points ; brandon roy } = true", "output": "for the high points records of all rows , most of them fuzzily match to brandon roy .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { eq { diff { hop { filter_eq { all_rows ; runner up ; sydney swans } ; attendance } ; hop { filter_eq { all_rows ; runner up ; hawthorn } ; attendance } } ; -61861 } ; and { eq { hop { filter_eq { all_rows ; runner up ; sydney swans } ; attendance } ; 30824 } ; eq { hop { filter_eq { all_rows ; runner up ; hawthorn } ; attendance } ; 92685 } } } = true", "output": "select the rows whose runner up record fuzzily matches to sydney swans . take the attendance record of this row . select the rows whose runner up record fuzzily matches to hawthorn . take the attendance record of this row . the second record is 61861 larger than the first record . the attendance record of the first row is 30824 . the attendance record of the second row is 92685 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { eq { hop { nth_argmin { all_rows ; date ; 3 } ; venue } ; victoria park } ; eq { hop { nth_argmin { all_rows ; date ; 3 } ; crowd } ; 23000 } } = true", "output": "select the row whose date record of all rows is 3rd minimum . the venue record of this row is victoria park . the crowd record of this row is 23000 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; extra ; team competition } = true", "output": "for the extra records of all rows , most of them fuzzily match to team competition .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; position ; fb } } ; eq { hop { filter_eq { all_rows ; position ; fb } ; name } ; bob briggs } } = true", "output": "select the rows whose position record fuzzily matches to fb . there is only one such row in the table . the name record of this unqiue row is bob briggs .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; completion % } ; year } ; 2010 } = true", "output": "select the row whose completion  record of all rows is maximum . the year record of this row is 2010 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; laps } ; 192 } = true", "output": "the average of the laps record of all rows is 192 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { filter_eq { all_rows ; seasons at this level ; 27 seasons } ; settlements ; lisbon } = true", "output": "select the rows whose seasons at this level record fuzzily matches to 27 seasons . for the settlements records of these rows , most of them fuzzily match to lisbon .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { filter_greater_eq { all_rows ; points ; 55 } ; opponent ; new york rangers } } ; 2 } = true", "output": "select the rows whose points record is greater than or equal to 55 . among these rows , select the rows whose opponent record fuzzily matches to new york rangers . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; drawn } ; 2.55 } = true", "output": "the average of the drawn record of all rows is 2.55 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; total ; 2 } ; athlete } ; monica pinette } = true", "output": "select the row whose total record of all rows is 2nd maximum . the athlete record of this row is monica pinette .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { sum { all_rows ; races } ; 190 } = true", "output": "the sum of the races record of all rows is 190 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_greater_eq { all_rows ; to par ; 9 } = true", "output": "for the to par records of all rows , most of them are greater than or equal to 9 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; top 10 } ; year } ; 1996 } = true", "output": "select the row whose top 10 record of all rows is maximum . the year record of this row is 1996 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_greater { all_rows ; points ; 100 } = true", "output": "for the points records of all rows , most of them are greater than 100 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; date of vacancy ; 21 december 2010 } } ; eq { hop { filter_eq { all_rows ; date of vacancy ; 21 december 2010 } ; outgoing head coach } ; jorge costa } } = true", "output": "select the rows whose date of vacancy record fuzzily matches to 21 december 2010 . there is only one such row in the table . the outgoing head coach record of this unqiue row is jorge costa .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; type ; end of contract } = true", "output": "for the type records of all rows , most of them fuzzily match to end of contract .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; pick ; 2 } ; player } ; spencer wadsworth } = true", "output": "select the row whose pick record of all rows is 2nd maximum . the player record of this row is spencer wadsworth .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; manner of departure ; contract terminated } } ; 6 } = true", "output": "select the rows whose manner of departure record fuzzily matches to contract terminated . the number of such rows is 6 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; extra points ; 0 } = true", "output": "for the extra points records of all rows , most of them are equal to 0 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; rank ; 6 } ; name } ; emilio falla ( ecu ) } = true", "output": "select the row whose rank record of all rows is 6th minimum . the name record of this row is emilio falla  ecu  .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; time ; 3 } ; title } ; my lord what a mornin ' } = true", "output": "select the row whose time record of all rows is 3rd minimum . the title record of this row is my lord what a mornin  .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "less { hop { filter_eq { all_rows ; player ; john daly } ; year ( s ) won } ; hop { filter_eq { all_rows ; player ; david toms } ; year ( s ) won } } = true", "output": "select the rows whose player record fuzzily matches to john daly . take the year  s  won record of this row . select the rows whose player record fuzzily matches to david toms . take the year  s  won record of this row . the first record is less than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { eq { hop { filter_eq { all_rows ; district ; arkansas 5 } ; result } ; hop { filter_eq { all_rows ; district ; arkansas 6 } ; result } } ; and { eq { hop { filter_eq { all_rows ; district ; arkansas 5 } ; result } ; retired democratic hold } ; eq { hop { filter_eq { all_rows ; district ; arkansas 6 } ; result } ; retired democratic hold } } } = true", "output": "select the rows whose district record fuzzily matches to arkansas 5 . take the result record of this row . select the rows whose district record fuzzily matches to arkansas 6 . take the result record of this row . the first record fuzzily matches to the second record . the result record of the first row is retired democratic hold . the result record of the second row is retired democratic hold .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmin { filter_eq { all_rows ; position ; guard } ; years in orlando } ; player } ; todd lichti } = true", "output": "select the rows whose position record fuzzily matches to guard . select the row whose years in orlando record of these rows is minimum . the player record of this row is todd lichti .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; high points ; jason richardson } = true", "output": "for the high points records of all rows , most of them fuzzily match to jason richardson .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; goals for ; 2 } ; club } ; barcelona b } = true", "output": "select the row whose goals for record of all rows is 2nd maximum . the club record of this row is barcelona b .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; first downs } ; 19.42 } = true", "output": "the average of the first downs record of all rows is 19.42 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; competition ; 2014 fifa world cup qualification } } ; eq { hop { filter_eq { all_rows ; competition ; 2014 fifa world cup qualification } ; date } ; 15 october 2013 } } = true", "output": "select the rows whose competition record fuzzily matches to 2014 fifa world cup qualification . there is only one such row in the table . the date record of this unqiue row is 15 october 2013 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; affiliation ; private } } ; 2 } = true", "output": "select the rows whose affiliation record fuzzily matches to private . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { sum { all_rows ; wickets } ; 90 } = true", "output": "the sum of the wickets record of all rows is 90 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { filter_eq { all_rows ; date ; 2004 } ; surface ; hard } } ; 2 } = true", "output": "select the rows whose date record fuzzily matches to 2004 . among these rows , select the rows whose surface record fuzzily matches to hard . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; date ; october } } ; 4 } = true", "output": "select the rows whose date record fuzzily matches to october . the number of such rows is 4 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_less_eq { all_rows ; tournaments played ; 3 } = true", "output": "for the tournaments played records of all rows , most of them are less than or equal to 3 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { filter_greater { all_rows ; round ; 2 } ; position ; defensive back } } ; 2 } = true", "output": "select the rows whose round record is greater than 2 . among these rows , select the rows whose position record fuzzily matches to defensive back . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; caps } ; name } ; ronaldo } = true", "output": "select the row whose caps record of all rows is maximum . the name record of this row is ronaldo .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; jump 1 ; 2 } ; athlete name } ; dmitriy bondarenko ( urs ) } = true", "output": "select the row whose jump 1 record of all rows is 2nd maximum . the athlete name record of this row is dmitriy bondarenko  urs  .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_less { filter_eq { all_rows ; adopted ; 1999 } ; population ( 2011 - 01 - 01 ) ; 1000000 } } ; eq { hop { filter_less { filter_eq { all_rows ; adopted ; 1999 } ; population ( 2011 - 01 - 01 ) ; 1000000 } ; state } ; luxembourg } } = true", "output": "select the rows whose adopted record fuzzily matches to 1999 . among these rows , select the rows whose population  2011  01  01  record is less than 1000000 . there is only one such row in the table . the state record of this unqiue row is luxembourg .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { filter_eq { all_rows ; co - driver ; leo kinnunen } ; pos ; ret } = true", "output": "select the rows whose co  driver record fuzzily matches to leo kinnunen . for the pos records of these rows , most of them fuzzily match to ret .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; production in 2011 ( 1000 ton ) } ; country } ; china } = true", "output": "select the row whose production in 2011  1000 ton  record of all rows is maximum . the country record of this row is china .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; episodes } ; 10.73 } = true", "output": "the average of the episodes record of all rows is 10.73 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { filter_less { all_rows ; sets ; 5 } ; event ; wimbledon } } ; 2 } = true", "output": "select the rows whose sets record is less than 5 . among these rows , select the rows whose event record fuzzily matches to wimbledon . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; magnitude } ; epicenter } ; saravan , iran } = true", "output": "select the row whose magnitude record of all rows is maximum . the epicenter record of this row is saravan , iran .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; high points ; vince carter } } ; 9 } = true", "output": "select the rows whose high points record fuzzily matches to vince carter . the number of such rows is 9 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; place ; pietersburg } ; population } ; hop { filter_eq { all_rows ; place ; alldays } ; population } } = true", "output": "select the rows whose place record fuzzily matches to pietersburg . take the population record of this row . select the rows whose place record fuzzily matches to alldays . take the population record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; matches ; 6 } } ; eq { hop { filter_eq { all_rows ; matches ; 6 } ; player } ; mark turner } } = true", "output": "select the rows whose matches record is equal to 6 . there is only one such row in the table . the player record of this unqiue row is mark turner .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; crowd } ; 14000 } = true", "output": "the average of the crowd record of all rows is 14000 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; team ; holden racing team } = true", "output": "for the team records of all rows , most of them fuzzily match to holden racing team .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; year ; 1995 } ; points } ; hop { filter_eq { all_rows ; year ; 1996 } ; points } } = true", "output": "select the rows whose year record fuzzily matches to 1995 . take the points record of this row . select the rows whose year record fuzzily matches to 1996 . take the points record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_all { all_rows ; driver } } ; 10 } = true", "output": "select the rows whose driver record is arbitrary . the number of such rows is 10 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { max { filter_eq { all_rows ; match points ; 2 - 2 } ; points margin } ; 20 } = true", "output": "select the rows whose match points record fuzzily matches to 2  2 . the maximum points margin record of these rows is 20 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { filter_less_eq { all_rows ; to par ; -1 } ; score } ; 284.2 } = true", "output": "select the rows whose to par record is less than or equal to 1 . the average of the score record of these rows is 284.2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; opponent in final ; sho sasaki } } ; 2 } = true", "output": "select the rows whose opponent in final record fuzzily matches to sho sasaki . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; series ; british formula three } ; points } ; hop { filter_eq { all_rows ; series ; formula bmw americas } ; points } } = true", "output": "select the rows whose series record fuzzily matches to british formula three . take the points record of this row . select the rows whose series record fuzzily matches to formula bmw americas . take the points record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { eq { max { all_rows ; yield ( megatons ) } ; 50 } ; eq { hop { argmax { all_rows ; yield ( megatons ) } ; date ( gmt ) } ; october 30 , 1961 } } = true", "output": "the maximum yield  megatons  record of all rows is 50 . the date  gmt  record of the row with superlative yield  megatons  record is october 30 , 1961 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; home / away ; home } } ; 8 } = true", "output": "select the rows whose home  away record fuzzily matches to home . the number of such rows is 8 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; opponent ; new york knicks } } ; 2 } = true", "output": "select the rows whose opponent record fuzzily matches to new york knicks . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; goals } ; 15 } = true", "output": "the average of the goals record of all rows is 15 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; margin of victory ; playoff } } ; 2 } = true", "output": "select the rows whose margin of victory record fuzzily matches to playoff . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; segment a ; plastic } } ; 3 } = true", "output": "select the rows whose segment a record fuzzily matches to plastic . the number of such rows is 3 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_greater { filter_eq { all_rows ; original album ; previously unreleased } ; time ; 4:00 } } ; 2 } = true", "output": "select the rows whose original album record fuzzily matches to previously unreleased . among these rows , select the rows whose time record is greater than 4:00 . the number of such rows is 2 .", "category": "Code to Text 219.json"}]