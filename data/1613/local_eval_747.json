[{"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_less { all_rows ; away team score ; 70 } = true", "output": "for the away team score records of all rows , most of them are less than 70 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; points ; 24 } } ; eq { hop { filter_eq { all_rows ; points ; 24 } ; november } ; 20 } } = true", "output": "select the rows whose points record is equal to 24 . there is only one such row in the table . the november record of this unqiue row is 20 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; height } ; player } ; anthony randolph } = true", "output": "select the row whose height record of all rows is maximum . the player record of this row is anthony randolph .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; battling partners ; donald bradman and sid barnes } ; runs } ; hop { filter_eq { all_rows ; battling partners ; pat symcox and mark boucher } ; runs } } = true", "output": "select the rows whose battling partners record fuzzily matches to donald bradman and sid barnes . take the runs record of this row . select the rows whose battling partners record fuzzily matches to pat symcox and mark boucher . take the runs record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; team ; 499cc matchless g50 } } ; eq { hop { filter_eq { all_rows ; team ; 499cc matchless g50 } ; rider } ; mark herbertson } } = true", "output": "select the rows whose team record fuzzily matches to 499cc matchless g50 . there is only one such row in the table . the rider record of this unqiue row is mark herbertson .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; team ( s ) ; stegell motorsports } } ; 4 } = true", "output": "select the rows whose team  s  record fuzzily matches to stegell motorsports . the number of such rows is 4 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { sum { filter_eq { all_rows ; spacecraft ; venera } ; time elapsed } ; 205 } = true", "output": "select the rows whose spacecraft record fuzzily matches to venera . the sum of the time elapsed record of these rows is 205 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; first elected ; 2 } ; incumbent } ; lane evans } = true", "output": "select the row whose first elected record of all rows is 2nd maximum . the incumbent record of this row is lane evans .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_greater { all_rows ; height ; 80 } } ; 4 } = true", "output": "select the rows whose height record is greater than 80 . the number of such rows is 4 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; channel ; 40 } } ; eq { hop { filter_eq { all_rows ; channel ; 40 } ; territory } ; indonesia } } = true", "output": "select the rows whose channel record is equal to 40 . there is only one such row in the table . the territory record of this unqiue row is indonesia .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; games ; 1958 tokyo } ; total } ; hop { filter_eq { all_rows ; games ; 1966 bangkok } ; total } } = true", "output": "select the rows whose games record fuzzily matches to 1958 tokyo . take the total record of this row . select the rows whose games record fuzzily matches to 1966 bangkok . take the total record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmin { all_rows ; laps } ; rider } ; carlos checa } = true", "output": "select the row whose laps record of all rows is minimum . the rider record of this row is carlos checa .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; round } ; 3.7 } = true", "output": "the average of the round record of all rows is 3.7 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; result ; won } } ; 8 } = true", "output": "select the rows whose result record fuzzily matches to won . the number of such rows is 8 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; year joined ; 1956 } } ; 4 } = true", "output": "select the rows whose year joined record is equal to 1956 . the number of such rows is 4 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; points } ; player } ; paul magoffin } = true", "output": "select the row whose points record of all rows is maximum . the player record of this row is paul magoffin .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; date ; 10 } = true", "output": "for the date records of all rows , most of them fuzzily match to 10 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmin { all_rows ; enrollment } ; school } ; cloverdale } = true", "output": "select the row whose enrollment record of all rows is minimum . the school record of this row is cloverdale .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; release date ; 1 } ; developer ( s ) } ; valve corporation } = true", "output": "select the row whose release date record of all rows is 1st minimum . the developer  s  record of this row is valve corporation .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { nth_min { all_rows ; number ; 2 } ; 18 } = true", "output": "the 2nd minimum number record of all rows is 18 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "only { filter_eq { all_rows ; event ; medley } } = true", "output": "select the rows whose event record fuzzily matches to medley . there is only one such row in the table .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; max pressure ; 4 } ; cartridge } ; .38 super } = true", "output": "select the row whose max pressure record of all rows is 4th maximum . the cartridge record of this row is .38 super .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; date ; 3 } ; tournament } ; chennai , india } = true", "output": "select the row whose date record of all rows is 3rd minimum . the tournament record of this row is chennai , india .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { nth_min { all_rows ; date ; 1 } ; july 23 , 2002 } = true", "output": "the 1st minimum date record of all rows is july 23 , 2002 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; crowd } ; 15760 } = true", "output": "the average of the crowd record of all rows is 15760 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { min { filter_eq { all_rows ; result ; w } ; date } ; september 13 } = true", "output": "select the rows whose result record fuzzily matches to w . the minimum date record of these rows is september 13 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; races ; 2 } ; season } ; 2010 } = true", "output": "select the row whose races record of all rows is 2nd minimum . the season record of this row is 2010 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; overall pick ; 3 } ; player } ; dennis byrd } = true", "output": "select the row whose overall pick record of all rows is 3rd minimum . the player record of this row is dennis byrd .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; attendance ; 2 } ; date } ; saturday , april 10 } = true", "output": "select the row whose attendance record of all rows is 2nd maximum . the date record of this row is saturday , april 10 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; partner ; igor sijsling } } ; 2 } = true", "output": "select the rows whose partner record fuzzily matches to igor sijsling . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { diff { hop { filter_eq { all_rows ; city of license ; norton , virginia } ; frequency mhz } ; hop { filter_eq { all_rows ; city of license ; pound , virginia } ; frequency mhz } } ; 0.4 } = true", "output": "select the rows whose city of license record fuzzily matches to norton , virginia . take the frequency mhz record of this row . select the rows whose city of license record fuzzily matches to pound , virginia . take the frequency mhz record of this row . the first record is 0.4 larger than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; attendance } ; date } ; 17 } = true", "output": "select the row whose attendance record of all rows is maximum . the date record of this row is 17 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { filter_eq { all_rows ; opponent ; buffalo sabres } ; game ; 2 } ; november } ; 22 } = true", "output": "select the rows whose opponent record fuzzily matches to buffalo sabres . select the row whose game record of these rows is 2nd minimum . the november record of this row is 22 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_not_eq { all_rows ; event ; team competitions } = true", "output": "for the event records of all rows , most of them do not match to team competitions .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; sets lost ; 2 } ; team } ; far eastern university } = true", "output": "select the row whose sets lost record of all rows is 2nd maximum . the team record of this row is far eastern university .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; official name ; madawaska } ; area km 2 } ; hop { filter_eq { all_rows ; official name ; baker brook } ; area km 2 } } = true", "output": "select the rows whose official name record fuzzily matches to madawaska . take the area km 2 record of this row . select the rows whose official name record fuzzily matches to baker brook . take the area km 2 record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_greater_eq { all_rows ; result ; 10 } = true", "output": "for the result records of all rows , most of them are greater than or equal to 10 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { all_rows ; points ; 2 } ; player } ; andy kaufmann } = true", "output": "select the row whose points record of all rows is 2nd maximum . the player record of this row is andy kaufmann .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; country ; brazil } ; change ( 2011 to 2012 ) } ; hop { filter_eq { all_rows ; country ; canada } ; change ( 2011 to 2012 ) } } = true", "output": "select the rows whose country record fuzzily matches to brazil . take the change  2011 to 2012  record of this row . select the rows whose country record fuzzily matches to canada . take the change  2011 to 2012  record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmin { all_rows ; date } ; race name } ; vi glover trophy } = true", "output": "select the row whose date record of all rows is minimum . the race name record of this row is vi glover trophy .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmax { filter_greater_eq { all_rows ; won ; 10 } ; lost ; 3 } ; club } ; pontyclun rfc } = true", "output": "select the rows whose won record is greater than or equal to 10 . select the row whose lost record of these rows is 3rd maximum . the club record of this row is pontyclun rfc .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "most_eq { all_rows ; home ; philadelphia } = true", "output": "for the home records of all rows , most of them fuzzily match to philadelphia .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; venue ; windy hill } } ; and { eq { hop { filter_eq { all_rows ; venue ; windy hill } ; home team } ; essendon } ; eq { hop { filter_eq { all_rows ; venue ; windy hill } ; away team } ; st kilda } } } = true", "output": "select the rows whose venue record fuzzily matches to windy hill . there is only one such row in the table . the home team record of this unqiue row is essendon . the away team record of this unqiue row is st kilda .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; high points ; dorell wright } } ; 2 } = true", "output": "select the rows whose high points record fuzzily matches to dorell wright . the number of such rows is 2 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; ties ; 3 } } ; eq { hop { filter_eq { all_rows ; ties ; 3 } ; season } ; 2008 } } = true", "output": "select the rows whose ties record is equal to 3 . there is only one such row in the table . the season record of this unqiue row is 2008 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; qual } ; start } ; 5 } = true", "output": "select the row whose qual record of all rows is maximum . the start record of this row is 5 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; hard discounters } ; country } ; spain } = true", "output": "select the row whose hard discounters record of all rows is maximum . the country record of this row is spain .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { only { filter_eq { all_rows ; college ; indiana university of pennsylvania } } ; eq { hop { filter_eq { all_rows ; college ; indiana university of pennsylvania } ; player } ; leander jordan } } = true", "output": "select the rows whose college record fuzzily matches to indiana university of pennsylvania . there is only one such row in the table . the player record of this unqiue row is leander jordan .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; name ; uchana kalan } ; number of electorates ( 2009 ) } ; hop { filter_eq { all_rows ; name ; bawani khera } ; number of electorates ( 2009 ) } } = true", "output": "select the rows whose name record fuzzily matches to uchana kalan . take the number of electorates  2009  record of this row . select the rows whose name record fuzzily matches to bawani khera . take the number of electorates  2009  record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; bronze ; 1 } } ; 3 } = true", "output": "select the rows whose bronze record is equal to 1 . the number of such rows is 3 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; age } ; candidate } ; kirsty parkhill } = true", "output": "select the row whose age record of all rows is maximum . the candidate record of this row is kirsty parkhill .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; year premiered ; 2010 } } ; 3 } = true", "output": "select the rows whose year premiered record is equal to 2010 . the number of such rows is 3 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "all_eq { all_rows ; game ; 14 } = true", "output": "for the game records of all rows , all of them are equal to 14 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "greater { hop { filter_eq { all_rows ; aircraft ; bell 212 } ; in service } ; hop { filter_eq { all_rows ; aircraft ; bell 412 } ; in service } } = true", "output": "select the rows whose aircraft record fuzzily matches to bell 212 . take the in service record of this row . select the rows whose aircraft record fuzzily matches to bell 412 . take the in service record of this row . the first record is greater than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "all_eq { all_rows ; type ; private } = true", "output": "for the type records of all rows , all of them fuzzily match to private .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_greater { all_rows ; rec ; 50 } } ; 4 } = true", "output": "select the rows whose rec record is greater than 50 . the number of such rows is 4 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmax { all_rows ; number of seasons in superettan } ; club } ; assyriska ff } = true", "output": "select the row whose number of seasons in superettan record of all rows is maximum . the club record of this row is assyriska ff .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_eq { all_rows ; nor 1 ; ret } } ; 3 } = true", "output": "select the rows whose nor 1 record fuzzily matches to ret . the number of such rows is 3 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { nth_argmin { all_rows ; date ; 1 } ; race name } ; datsun twin 200 } = true", "output": "select the row whose date record of all rows is 1st minimum . the race name record of this row is datsun twin 200 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "less { hop { filter_eq { all_rows ; venue ; glenferrie oval } ; crowd } ; hop { filter_eq { all_rows ; venue ; mcg } ; crowd } } = true", "output": "select the rows whose venue record fuzzily matches to glenferrie oval . take the crowd record of this row . select the rows whose venue record fuzzily matches to mcg . take the crowd record of this row . the first record is less than the second record .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "round_eq { avg { all_rows ; crowd } ; 14464 } = true", "output": "the average of the crowd record of all rows is 14464 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "and { greater { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } } ; and { eq { hop { filter_eq { all_rows ; project ; \u00f6zhan canayd\u0131n project } ; capacity } ; 52652 } ; eq { hop { filter_eq { all_rows ; project ; faruk s\u00fcren project } ; capacity } ; 40482 } } } = true", "output": "select the rows whose project record fuzzily matches to \u00f6zhan canayd\u0131n project . take the capacity record of this row . select the rows whose project record fuzzily matches to faruk s\u00fcren project . take the capacity record of this row . the first record is greater than the second record . the capacity record of the first row is 52652 . the capacity record of the second row is 40482 .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { hop { argmin { all_rows ; launched } ; ship name } ; brp pangasinan } = true", "output": "select the row whose launched record of all rows is minimum . the ship name record of this row is brp pangasinan .", "category": "Code to Text 219.json"}, {"instruction": "In this task, you are given commands (in terms of logical operations) to select relevant rows from the given table. Your job is to generate a natural language interpretation of the given command. \n Here are the definitions of logical operators: \n 1. count: returns the number of rows in the view \n 2. only: returns whether there is exactly one row in the view \n 3. hop: returns the value under the header column of the row \n 4. and: returns the boolean operation result of two arguments \n 5. max/min/avg/sum: returns the max/min/average/sum of the values under the header column \n 6. nth max/nth min: returns the n-th max/n-th min of the values under the header column \n 7. argmax/argmin: returns the row with the max/min value in header column \n 8. nth argmax/nth argmin: returns the row with the n-th max/min value in header column \n 9. eq/not eq: returns if the two arguments are equal \n 10. round eq: returns if the two arguments are roughly equal under certain tolerance \n 11. greater/less: returns if argument 1 is greater/less than argument 2 \n 12. diff: returns the difference between two arguments \n 13. filter eq/not eq: returns the subview whose values under the header column is equal/not equal to argument 3 \n 14. filter greater/less: returns the subview whose values under the header column is greater/less than argument 3 \n 15. filter greater eq /less eq: returns the subview whose values under the header column is greater/less or equal than argument 3 \n 16. filter all: returns the view itself for the case of describing the whole table \n 17. all eq/not eq: returns whether all the values under the header column are equal/not equal to argument 3 \n 18. all greater/less: returns whether all the values under the header column are greater/less than argument 3 \n 19. all greater eq/less eq: returns whether all the values under the header column are greater/less or equal to argument 3 \n 20. most eq/not eq: returns whether most of the values under the header column are equal/not equal to argument 3 \n 21. most greater/less: returns whether most of the values under the header column are greater/less than argument 3 \n 22. most greater eq/less eq: returns whether most of the values under the header column are greater/less or equal to argument 3", "input": "eq { count { filter_greater { filter_eq { all_rows ; result ; w } ; attendance ; 40000 } } ; 4 } = true", "output": "select the rows whose result record fuzzily matches to w . among these rows , select the rows whose attendance record is greater than 40000 . the number of such rows is 4 .", "category": "Code to Text 219.json"}]